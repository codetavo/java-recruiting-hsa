<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="33a0790c-3dd9-4c0b-b653-184d9c000945" activeEnvironment="Default" name="CategoriesService" resourceRoot="" soapui-version="5.6.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="56919d3a-1051-4174-98df-5bec05bb3e7d" port="8082" path="/" host="CPX-KD8HBKP1AQD" name="REST MockCategoriesService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/categories" method="GET" resourcePath="/categories" id="7e3a2c29-07be-4265-8e5c-cd148c3f694a"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="ResponseCategories" id="c469379c-37fe-45b6-bfde-65f11dacbdb6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "id": "string",
  "name": "string",
  "relevance": 0,
  "subcategories": [
    {
      "id": "string",
      "name": "string",
      "relevance": 0,
      "subcategories": [
        {
          "id": "string",
          "name": "string",
          "relevance": 0,
          "iconImageUrl": "string",
          "subcategories": [
            {
              "id": "string",
              "name": "string",
              "relevance": 0,
              "largeImageUrl": "string",
              "mediumImageUrl": "string",
              "smallImageUrl": "string",
              "subcategories": [
                {
                  "id": "string",
                  "name": "string",
                  "relevance": 0
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>